
var happyHourChannel = '#dogec0in-bots';

var HappyHourModule = function() {
  var self = this;

  // Duration of a happy hour in seconds
  var happyHourDuration = 60 * 60;

  // ===============================
  // = DO NOT EDIT BELOW THIS LINE =
  // ===============================

  // The IRC client
  self.client = null;

  // The main indicator
  var happyHourActive = false;

  // Timer references
  var happyHourStart = null;
  var happyHourEnd = null;
  var happyHourAnnounce = null;

  var happyHourStartTime = null;

  // Chance to win a bonus. Value is 1 in <happyHourChance>
  var happyHourChance = 3;


  self.startHappyHourCountdown = function() {
    clearTimeout(happyHourAnnounce);

    var happyHourTimeoutSeconds = randomInt(1, 10) * 60;

    var d = new Date();
    d.setSeconds(d.getSeconds() + happyHourTimeoutSeconds);
    happyHourStartTime = d;

    happyHourStart = setTimeout(
      self.happyHourStart,
      happyHourTimeoutSeconds * 1000
    );

    self.client.say(happyHourChannel, "Happy hour in just " + (happyHourTimeoutSeconds/60) + ' minutes!');
  };

  self.happyHourStart = function() {
    clearTimeout(happyHourStart);

    happyHourActive = true;
    self.client.say(happyHourChannel, "HAPPY HOUR!");

    happyHourEnd = setTimeout(self.happyHourEnd, happyHourDuration * 1000);
  };

  self.happyHourEnd = function() {
    clearTimeout(happyHourEnd);

    happyHourActive = false;
    self.client.say(happyHourChannel, "Happy hour is over!");

    happyHourAnnounce = setTimeout(self.startHappyHourCountdown, 3000);
  };

  self.processMessage = function(from, text, message) {
    if(!happyHourActive) {
      return;
    }

    if(randomInt(1, happyHourChance) === happyHourChance) {
      self.client.say(happyHourChannel, "~~~~~~~~~~~~~~~ you won something ~~~~~~~~~~~~~~~");
    }
  };

  self.countDownRequestListener = function(from, text, message) {
    if(text == '!happyhour') {
      self.client.say(happyHourChannel, "Happy hour is at " + happyHourStartTime.toGMTString() + ' in just ' + (happyHourStartTime.getMinutes() - (new Date()).getMinutes()) + ' minutes!');
    }
    if(text == '!override') {
      self.client.say(happyHourChannel, "Let's get this party started!");
      self.happyHourStart();
    }
  };

  /**
   * Unloads all listeners
  */
  self.unload = function(client) {
    clearTimeout(happyHourStart);
    clearTimeout(happyHourEnd);
    clearTimeout(happyHourAnnounce);

    client.removeListener('message' + happyHourChannel, self.processMessage);
    client.removeListener('message' + happyHourChannel, self.countDownRequestListener);

    self.client = null;
  };

  /**
   * Loads all listeners
  */
  self.load = function(client) {
    self.client = client;

    client.addListener('message' + happyHourChannel, self.countDownRequestListener);
    client.addListener('message' + happyHourChannel, self.processMessage);

    self.client.join(happyHourChannel, function() {
      self.startHappyHourCountdown();
    });
  };

};

module.exports = new HappyHourModule();

function randomInt(low, high) {
  return Math.floor(Math.random() * (high - low + 1) + low);
}
